datasource db {
  provider          = "postgres"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Categories of clothes
enum UpperBodyWinter {
  Jackets
  Coats
  Mufflers
  Caps
  FullSleeveTShirts
  FullSleeveShirts
}

enum UpperBodySummer {
  HalfSleeveTShirts
  HalfSleeveShirts
  CutSleeveTShirts
}

enum LowerBody {
  Jeans
  Shorts
  Pants
}

enum UpperBody {
  UpperBodySummer
  UpperBodyWinter
}

enum Category {
  UpperBody
  LowerBody
}

model Buyer {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  photoUrl String
  address  String @unique
  closet   NFT[]
}

model Seller {
  id       String    @id @default(uuid())
  name     String
  photoUrl String
  about    String
  products Product[]
  NFT      NFT[]
}

enum ProductStatus {
  purchased_not_delivered
  purchased_delivered
  not_purchased
}

enum Crypto {
  matic
  ether
}

enum PurchaseMethod {
  Card
  Cash
  Crypto
}

enum Chain {
  matic
  eth
}

model Product {
  id       String         @id @default(uuid())
  name     String
  NFT      NFT            @relation(fields: [nFTId], references: [id])
  nFTId    String
  category Category
  method   PurchaseMethod @default(Cash)
  chain    Chain          @default(matic)
  price    Int
  status   ProductStatus  @default(not_purchased)
  Seller   Seller?        @relation(fields: [sellerId], references: [id])
  sellerId String?
}

enum NFTStatus {
  purchased_and_not_revealed // Product purchased, NFT not revealed
  purchased_and_revealed // Product purchased, NFT revealed
  not_purchased // Product not purchased
}

model NFT {
  id       String    @id @default(uuid())
  status   NFTStatus @default(not_purchased)
  image    String
  desc     String
  traits   Json[]
  Seller   Seller?   @relation(fields: [sellerId], references: [id])
  sellerId String?
  Buyer    Buyer?    @relation(fields: [buyerId], references: [id])
  buyerId  String?
  Product  Product[]
}

// model User {
//   id                 String              @id @default(uuid())
//   createdAt          DateTime            @default(now())
//   photoUrl           String?
//   email              String              @unique
//   designation        String              @default("")
//   tagLine            String              @default("")
//   name               String
//   role               Role                @default(USER)
//   //  logo,name
//   social             Json[]
//   aboutMe            String              @default("")
//   bookings           Booking[]           @relation
//   mentorProfile      MentorProfile?
//   userRequest        Request[]           @relation("user-request")
//   mentorRequest      Request[]           @relation("mentor-request")
//   fieldTags          FieldTags[]
//   schedule           Schedule[]
//   reviews            Reviews[]
//   liveSessionNotify  LiveSessionNotify[]
//   liveSessions       LiveSession[]
//   mentorApplications MentorApplications?

//   @@index([role, id])
// }

// enum Role {
//   USER
//   MENTOR
//   ADMIN
// }

// model MentorProfile {
//   id              String       @id @default(uuid())
//   bannerUrl       String?
//   price           Price?
//   visible         Boolean      @default(false)
//   acceptingReview Boolean      @default(false)
//   user            User?        @relation(fields: [userId], references: [id])
//   userId          String       @unique
//   experience      Experience[]
//   education       Education[]
//   reviews         Reviews[]

//   @@index([visible, id, userId])
//   @@index([id])
//   @@index([visible])
// }

// model Price {
//   id              String        @id @default(uuid())
//   currency        String        @default("INR")
//   val             Int           @default(2000)
//   mentorProfile   MentorProfile @relation(fields: [mentorProfileId], references: [id])
//   mentorProfileId String        @unique

//   @@index([id])
// }

// model Reviews {
//   id              String        @id @default(uuid())
//   user            User          @relation(fields: [userId], references: [id])
//   userId          String
//   mentorProfile   MentorProfile @relation(fields: [mentorProfileId], references: [id])
//   text            String
//   title           String
//   rating          Int
//   mentorProfileId String

//   @@index([id])
//   @@index([mentorProfileId])
//   @@index([userId])
// }

// model Experience {
//   id              String         @id @default(uuid())
//   startDate       String
//   endDate         String?
//   present         Boolean
//   title           String
//   description     String
//   organisation    String
//   mentorProfile   MentorProfile? @relation(fields: [mentorProfileId], references: [id])
//   mentorProfileId String?

//   @@index([mentorProfileId])
//   @@index([id])
// }

// model Education {
//   id              String         @id @default(uuid())
//   startDate       String
//   endDate         String?
//   present         Boolean
//   title           String
//   description     String
//   institute       String
//   mentorProfile   MentorProfile? @relation(fields: [mentorProfileId], references: [id])
//   mentorProfileId String?

//   @@index([id])
//   @@index([mentorProfileId])
// }

// model Field {
//   id        String      @id @default(uuid())
//   val       String      @unique
//   fieldTags FieldTags[]

//   @@index([id])
// }

// model FieldTags {
//   id         String   @id @default(uuid())
//   user       User     @relation(fields: [userId], references: [id])
//   userId     String
//   field      Field    @relation(fields: [fieldId], references: [id])
//   fieldId    String
//   assignedAt DateTime @default(now())

//   @@index([id])
// }

// model Booking {
//   id        String    @id @default(uuid())
//   userId    String
//   user      User      @relation(fields: [userId], references: [id])
//   request   Request[]
//   meeting   Meeting   @relation(fields: [meetingId], references: [id])
//   meetingId String

//   @@index([id])
// }

// model Request {
//   id        String     @id @default(uuid())
//   bookingId String
//   booking   Booking    @relation(fields: [bookingId], references: [id])
//   userId    String
//   mentorId  String
//   sender    User       @relation(fields: [userId], references: [id], name: "user-request")
//   receiver  User       @relation(fields: [mentorId], references: [id], name: "mentor-request")
//   slot      Schedule[]
//   status    Int        @default(0)

//   @@index([id])
// }

// model Meeting {
//   id          String    @id @default(uuid())
//   allowedList String[]
//   events      Json[]
//   time        DateTime
//   booking     Booking[]

//   @@index([id])
// }

// model Schedule {
//   id        String   @id @default(uuid())
//   startTime String
//   endTime   String
//   day       Int
//   weekly    Boolean
//   user      User     @relation(fields: [userId], references: [id])
//   userId    String
//   request   Request? @relation(fields: [requestId], references: [id])
//   requestId String?

//   @@index([id])
// }

// model LiveSessionNotify {
//   id            String      @id @default(uuid())
//   liveSessionId String
//   user          User        @relation(fields: [userId], references: [id])
//   userId        String
//   liveSession   LiveSession @relation(fields: [liveSessionId], references: [id])

//   @@index([id])
//   @@index([userId])
//   @@index([liveSessionId])
// }

// model LiveSession {
//   id                String              @id @default(uuid())
//   url               String
//   title             String
//   thumbnail         String
//   topic             String
//   date              DateTime
//   description       String
//   user              User                @relation(fields: [userId], references: [id])
//   userId            String
//   LiveSessionNotify LiveSessionNotify[]

//   @@index([id])
// }

// model MentorApplications {
//   id     String @id @default(uuid())
//   userId String @unique
//   user   User   @relation(fields: [userId], references: [id])
//   status Int    @default(0)

//   @@index([id])
// }
